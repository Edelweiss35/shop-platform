"""
Django settings for shop project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from decouple import config
import raven
from django.core.exceptions import ImproperlyConfigured
import json
import sentry_sdk
from sentry_sdk.integrations.logging import LoggingIntegration
import logging



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

with open(os.path.join(BASE_DIR, 'prod_secret.json')) as secrets_file:
    secrets = json.load(secrets_file)

def get_secret(setting, secrets=secrets):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return secrets[setting]
    except KeyError:
        raise ImproperlyConfigured("Set the {} setting".format(setting))


AUTH_USER_MODEL = 'Accounts.User' 

SECRET_KEY=get_secret('SECRET_KEY')








# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = config('DEBUG', default=True, cast=bool)



ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
     'Accounts',
    'djangocms_admin_style',
    'djangocms_text_ckeditor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'storefront',
    'cart',
    'orders',
    'widget_tweaks',
    'dashboard',
    'public',
    'raven.contrib.django.raven_compat',
    'django.contrib.sites',
    'menus',
    'treebeard',
    'sekizai',
    'filer',
    'easy_thumbnails',
    'mptt',
    'cms',
    'djangocms_link',
    'djangocms_file',
    'djangocms_picture',
    'djangocms_video',
    'djangocms_googlemap',
    'djangocms_snippet',
    'djangocms_style',
    'djangocms_column',
###############################3

]
THUMBNAIL_HIGH_RESOLUTION = True

THUMBNAIL_PROCESSORS = ('easy_thumbnails.processors.colorspace','easy_thumbnails.processors.autocrop', 'filer.thumbnail_processors.scale_and_crop_with_subject_location', 'easy_thumbnails.processors.filters')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cms.middleware.utils.ApphookReloadMiddleware',
    'django.middleware.locale.LocaleMiddleware', 
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',

    'shop.middleware.SimpleMiddleware',
    
    
]

ROOT_URLCONF = 'shop.urls'

CMS_PERMISSION = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
             os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                #'sekizai.context_processors.sekizai',
               # 'cms.context_processors.cms_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'shop.wsgi.application'

CMS_TEMPLATES = [
    ('list1-test.html', 'list'),
    ('home.html', 'home'),
]

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases





# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/


LANGUAGES = [  ('en', 'English'),  ('de', 'German'),]

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'



MEDIA_URL = '/media/'

MEDIA_ROOT = 'media'





DEFAULT_SITE_DOMAIN = get_secret('DEFAULT_SITE_DOMAIN')




STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]



LOGIN_REDIRECT_URL = 'dashboard:dashboard'


SITE_ID = 1

CART_SESSION_ID = 'cart'

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST=get_secret('EMAIL_HOST')
EMAIL_PORT=get_secret('EMAIL_PORT')
EMAIL_HOST_USER=get_secret('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=get_secret('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL = get_secret('DEFAULT_FROM_EMAIL')
USERNAME = get_secret('USERNAME')
PASSWORD = get_secret('PASSWORD')
AUTHORIZATION= get_secret('AUTHORIZATION')

PEM = config('PEM')



DATABASES = {
   'default': {
      'ENGINE': 'django.db.backends.sqlite3',
       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
   }
}




#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': get_secret('DBNAME'),
#        'USER': get_secret('DBUSER'),
#        'PASSWORD': get_secret('DBPASSWORD'),
#       'HOST': 'localhost',
#        'PORT': '',
#    }
#}


#sentry_logging = LoggingIntegration(
#    level=logging.INFO,        # Capture info and above as breadcrumbs
#    event_level=logging.ERROR  # Send errors as events
#)

#sentry_sdk.init(
#    dsn="https://79825cb66a614e649e2924e593e62354@sentry.io/1281673",
#    integrations=[sentry_logging]
#)


#RAVEN_CONFIG = {'dsn': 'https://79825cb66a614e649e2924e593e62354:3a1c94999b044a1195dffa242cddf2b4@sentry.io/1281673'}
  

